Imagine a library with a single book that multiple people want to read. Readers can read the book simultaneously without any issue, but if someone wants to write 
(or edit) the book, they need exclusive access. This means no one else should be reading or writing the book at the same time. The challenge is to coordinate the 
access so that:


Multiple readers can read at the same time.
Writers have exclusive access to write.
No reader should be reading when a writer is writing.

#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <chrono>

std::mutex mtx;
std::condition_variable cv;
int read_count = 0;
bool is_writing = false;

void reader(int id) {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, []{ return !is_writing; });
        ++read_count;
        lock.unlock();

        std::cout << "Reader " << id << " is reading.\n";
        std::this_thread::sleep_for(std::chrono::milliseconds(100));

        lock.lock();
        --read_count;
        if (read_count == 0) cv.notify_all();
}

void writer(int id) {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, []{ return !is_writing && read_count == 0; });
        is_writing = true;
        lock.unlock();

        std::cout << "Writer " << id << " is writing.\n";
        std::this_thread::sleep_for(std::chrono::milliseconds(150));

        lock.lock();
        is_writing = false;
        cv.notify_all();
}

int main() {
    std::thread readers[5], writers[2];
    for (int i = 0; i < 5; ++i) readers[i] = std::thread(reader, i + 1);
    for (int i = 0; i < 2; ++i) writers[i] = std::thread(writer, i + 1);
    for (int i = 0; i < 5; ++i) readers[i].join();
    for (int i = 0; i < 2; ++i) writers[i].join();
    return 0;
}
