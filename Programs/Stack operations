/* C++ program to implement basic stack
   operations */
#include <bits/stdc++.h>
#include <iostream>

using namespace std;

#define MAX 1000

class Stack {
    int top;

public:
    int a[MAX]; // Maximum size of Stack

    Stack() { top = -1; }
    void push(int x);
    void pop();
    void peek();
    bool isEmpty();
};

void Stack::push(int x)
{
    if (top >= (MAX - 1)) {
        cout << "Stack Overflow";
    }
    else {
        a[++top] = x;
        cout << x << " pushed into stack\n";
    }
}

void Stack::pop()
{
    if (top < 0) {
        cout << "Stack Underflow";
    }
    else {
        int x = a[top--];
        cout<<"Popped "<<x<<" from stack"<<endl;
    }
}
void Stack::peek()
{
    if (top < 0) {
        cout << "Stack is Empty";
    }
    else {
        int x = a[top];
        cout<<"Peeked "<<x<<""<<endl;
    }
}

bool Stack::isEmpty()
{
    return (top < 0);
}

// Driver program to test above functions
int main()
{
    Stack s;
    s.push(10);
    s.push(20);
    s.push(30);
    s.pop();
    s.peek();
  
    //print all elements in stack :
    cout <<"Elements present in stack : ";
    while(!s.isEmpty())
    {
        // print top element in stack
        s.peek();
        // remove top element in stack
        s.pop();
    }

    return 0;
}
