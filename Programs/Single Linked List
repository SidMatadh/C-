#include <iostream>
using namespace std;

struct Node {
    int data;
    struct Node *next;
};

Node* createNode(int data) {
    Node* newnode = (Node*)malloc(sizeof(Node));
    newnode->data = data;
    newnode->next = NULL;
    return newnode;
}

void insertBeg(Node **head, int data) {
    Node* newnode = createNode(data);
    newnode->next = *head;
    *head = newnode;
}

void insertEnd(Node **head, int data) {
    Node* newnode = createNode(data);

    Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newnode;
}

int getMid(Node *head) {
    int count = 0;
    Node* temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }
    return count / 2;
}

void insertMid(Node **head, int data) {
    Node* newnode = createNode(data);

    int mid = getMid(*head);
    Node* temp = *head;
    int count = 0;

    while (temp != NULL && count < mid - 1) {
        temp = temp->next;
        count++;
    }

    newnode->next = temp->next;
    temp->next = newnode;
}

void deleteBeg(Node **head) {
    Node* temp = *head;
    *head = (*head)->next;
    free(temp);
}

void deleteMid(Node **head) {

    int mid = getMid(*head);
    Node* temp = *head;
    int count = 0;

    while (temp != NULL && count < mid - 1) {
        temp = temp->next;
        count++;
    }

    if (temp != NULL && temp->next != NULL) {
        Node* toDelete = temp->next;
        temp->next = temp->next->next;
        free(toDelete);
    }
}

void deleteEnd(Node **head) {
    if (*head == NULL) return;

    Node* temp = *head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }

    free(temp->next);
    temp->next = NULL;
}

void printNode(Node **head) {
    Node* temp = *head;
    while (temp != NULL) {
        cout << temp->data << "->";
        temp = temp->next;
    }
    cout << "NULL\n";
}

int main() {
    Node *head = NULL;
    insertBeg(&head, 5);
    insertBeg(&head, 7);
    insertBeg(&head, 3);
    insertEnd(&head, 10);
    insertMid(&head, 50);

    deleteBeg(&head);
    deleteMid(&head);
    deleteEnd(&head);

    printNode(&head);
    return 0;
}
