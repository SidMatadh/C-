Single Linked List
Insertion Operations
Write a function to insert a node at the front of a single linked list.
Write a function to insert a node in the middle of a single linked list (given a position).
Write a function to insert a node at the end of a single linked list.

Deletion Operations
Write a function to delete a node from the front of a single linked list.
Write a function to delete a node from the middle of a single linked list (given a position).
Write a function to delete a node from the end of a single linked list.

#include <iostream>
using namespace std;

typedef struct Node
{
    int data;
    struct Node *next;
} Node;

Node* createNode(int data)
{
    Node *newnode = (Node*)malloc(sizeof(Node));
    if(newnode == nullptr)
        cout << "Failed to allocate";
    
    newnode->data = data;
    newnode->next = NULL;
    return newnode;
}

void insertnodeatbeg(Node **head, int data)
{
    Node* newnode = createNode(data);
    newnode->next = *head;
    *head = newnode;
}

void printnode(Node **head)
{
    Node *temp = *head;
    while(temp != NULL)
    {
        cout << temp->data << "->";
        temp = temp->next;
    }
    cout << "NULL" << endl;
}

void InsertatEnd(Node **head, int data)
{
    Node* newnode = createNode(data);
    if (*head == NULL)
    {
        *head = newnode;
        return;
    }
    
    Node *temp = *head;
    while(temp->next != nullptr)
    {
        temp = temp->next;
    }
    temp->next = newnode;
}

int getmid(Node *head)
{
    int count = 0;
    Node *temp = head;
    while(temp != NULL)
    {
        count++;
        temp = temp->next;
    }
    return count / 2;
}

void InsertatMid(Node **head, int data)
{
    Node* newnode = createNode(data);
    Node *temp = *head;
    int mid = getmid(*head);
    int count = 0;
    while(temp->next != nullptr && count < mid )
    {
        count++;
        temp = temp->next;
    }
    newnode->next = temp->next;
    temp->next = newnode;
}

void deleteFront(Node **head)
{
    if (*head == NULL)
    {
        cout << "List is empty" << endl;
        return;
    }
    Node *temp = *head;
    *head = (*head)->next;
    free(temp);
}

void deleteMid(Node **head, int position)
{
    if (*head == NULL)
    {
        cout << "List is empty" << endl;
        return;
    }
    
    Node *temp = *head;
    
    if (position == 0)
    {
        *head = temp->next;
        free(temp);
        return;
    }
    
    for (int i = 0; temp != NULL && i < position - 1; i++)
        temp = temp->next;
    
    if (temp == NULL || temp->next == NULL)
    {
        cout << "Position is out of range" << endl;
        return;
    }
    
    Node *next = temp->next->next;
    free(temp->next);
    temp->next = next;
}

void deleteEnd(Node **head)
{
    if (*head == NULL)
    {
        cout << "List is empty" << endl;
        return;
    }
    
    Node *temp = *head;
    
    if (temp->next == NULL)
    {
        free(temp);
        *head = NULL;
        return;
    }
    
    while (temp->next->next != NULL)
        temp = temp->next;
    
    free(temp->next);
    temp->next = NULL;
}

int main()
{
    Node *head = NULL;  
    
    insertnodeatbeg(&head, 10);
    insertnodeatbeg(&head, 20);
    insertnodeatbeg(&head, 30);
    insertnodeatbeg(&head, 40);
    insertnodeatbeg(&head, 50);
    InsertatEnd(&head, 60);
    InsertatMid(&head, 35);
    
    cout << "Original list: ";
    printnode(&head);
    
    deleteFront(&head);
    cout << "After deleting front: ";
    printnode(&head);
    
    deleteMid(&head, 2); // delete node at position 2
    cout << "After deleting middle (position 2): ";
    printnode(&head);
    
    deleteEnd(&head);
    cout << "After deleting end: ";
    printnode(&head);
    
    return 0;
}
