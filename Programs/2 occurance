#include <stdio.h>

// Function to remove duplicates and keep at most 2 occurrences of each element
int removeDuplicatesWithTwoOccurrences(int* nums, int numsSize) {
    // Edge case: empty array
    if (numsSize == 0) {
        return 0;
    }

    int i = 1; // Start from the second element (slow pointer)

    // Iterate from the second element to the end of the array
    for (int j = 2; j < numsSize; j++) {
        // Check if the current element is different from the element at the second last position
        if (nums[j] != nums[i - 1]) {
            i++; // Move slow pointer forward
            nums[i] = nums[j]; // Place the element at the new position
        }
    }

    // Return the new length (i + 1, since i is 0-indexed)
    return i + 1;
}

// Function to print an array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int nums[] = {1, 1, 1,1, 2, 2, 3};  // Example input
    int numsSize = sizeof(nums) / sizeof(nums[0]);

    // Call the function to remove duplicates (with at most 2 occurrences)
    int newLength = removeDuplicatesWithTwoOccurrences(nums, numsSize);

    // Print the modified array with no more than 2 duplicates
    printf("Array after removing duplicates (at most 2 occurrences): ");
    printArray(nums, newLength);

    printf("New length of the array: %d\n", newLength);

    return 0;
}
