#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>

using namespace std;

mutex mtx;
condition_variable cond;
int count = 1;
bool zero_turn = true;

void Zero()
{
    while (count < 10)
    {
        unique_lock<mutex> locker(mtx);
        cond.wait(locker, [](){ return zero_turn; });
        cout << "0 ";
        zero_turn = false;
        locker.unlock();
        cond.notify_all();
    }
}

void oddprint()
{
    while (count < 10)
    {
        unique_lock<mutex> locker(mtx);
        cond.wait(locker, [](){ return !zero_turn && (count % 2 == 1); });
        cout << count << " ";
        count++;
        zero_turn = true;
        locker.unlock();
        cond.notify_all();
    }
}

void evenprint()
{
    while (count < 10)
    {
        unique_lock<mutex> locker(mtx);
        cond.wait(locker, [](){ return !zero_turn && (count % 2 == 0); });
        cout << count << " ";
        count++;
        zero_turn = true;
        locker.unlock();
        cond.notify_all();
    }
}

int main()
{
    thread t0(Zero);
    thread t1(oddprint);
    thread t2(evenprint);
    t0.join();
    t1.join();
    t2.join();
    return 0;
}
