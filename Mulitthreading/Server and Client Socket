#include <iostream>
#include <unistd.h>
#include <arpa/inet.h>
#include <string.h>

using namespace std;

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};

    // Create socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket failed");
        return -1;
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8080);

    // Bind the socket
    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        return -1;
    }

    // Listen for incoming connections
    if (listen(server_fd, 3) < 0) {
        perror("Listen failed");
        return -1;
    }

    cout << "Waiting for connections...\n";

    // Accept an incoming connection
    if ((new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {
        perror("Accept failed");
        return -1;
    }

    // Read data from client
    read(new_socket, buffer, 1024);
    cout << "Client: " << buffer << endl;

    // Send a response to the client
    const char *message = "Hello from server";
    send(new_socket, message, strlen(message), 0);
    cout << "Message sent to client\n";

    // Close the socket
    close(new_socket);
    close(server_fd);
    return 0;
}


#include <iostream>
#include <unistd.h>
#include <arpa/inet.h>
#include <string.h>

using namespace std;

int main() {
    int sock = 0;
    struct sockaddr_in server_address;
    char buffer[1024] = {0};

    // Create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation failed");
        return -1;
    }

    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(8080);

    // Convert IPv4 address from text to binary
    if (inet_pton(AF_INET, "127.0.0.1", &server_address.sin_addr) <= 0) {
        perror("Invalid address");
        return -1;
    }

    // Connect to the server
    if (connect(sock, (struct sockaddr*)&server_address, sizeof(server_address)) < 0) {
        perror("Connection failed");
        return -1;
    }

    // Send data to server
    const char *message = "Hello from client";
    send(sock, message, strlen(message), 0);
    cout << "Message sent to server\n";

    // Read the response from server
    read(sock, buffer, 1024);
    cout << "Server: " << buffer << endl;

    // Close the socket
    close(sock);
    return 0;
}
