#include <iostream>
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <cstring>

using namespace std;

int main() {
    const char* name = "/tmp/myfifo";
    mkfifo(name, 0666); // Create named pipe with read/write permissions

    pid_t pid = fork();

    if (pid == 0) {
        // Child process - Writer
        int fd = open(name, O_WRONLY);
        const char* msg = "Hello from child";
        write(fd, msg, strlen(msg));
        close(fd);
    } else {
        // Parent process - Reader
        char buffer[1024] = {0};
        int fd = open(name, O_RDONLY);
        read(fd, buffer, sizeof(buffer));
        cout << "Parent received: " << buffer << endl;
        close(fd);
    }

    return 0;
}


#include <iostream>
#include <unistd.h>
#include <cstring>

using namespace std;

int main() {
    int fd[2]; // fd[0] - read end, fd[1] - write end

    if (pipe(fd) == -1) {
        cerr << "Pipe failed!" << endl;
        return 1;
    }

    pid_t pid = fork();

    if (pid < 0) {
        cerr << "Fork failed!" << endl;
        return 1;
    }

    if (pid == 0) {
        // Child process - Writer
        close(fd[0]); // Close unused read end
        const char* msg = "Hello from child";
        write(fd[1], msg, strlen(msg));
        close(fd[1]); // Close write end after writing
    } else {
        // Parent process - Reader
        close(fd[1]); // Close unused write end
        char buffer[1024] = {0};
        read(fd[0], buffer, sizeof(buffer));
        cout << "Parent received: " << buffer << endl;
        close(fd[0]); // Close read end after reading
    }

    return 0;
}

