Imagine you have a factory with two types of workers: producers and consumers. The producers create products and place them on a conveyor belt (a shared resource), 
while the consumers take products from the belt and use them. The challenge is to ensure that producers don't add products when the belt is full and consumers don't
try to take products when the belt is empty. This requires coordination to avoid situations where either the producers or consumers are waiting unnecessarily.

Where do we use
Logging and Monitoring: Managing logs and system events where producers generate log entries and consumers process or store these logs.
Policy Evaluation: Handling policy requests where one component produces requests for policy evaluation and another consumes these requests to enforce or log them.

#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <queue>
#include <chrono>

std::queue<int> buffer;
const unsigned int BUFFER_SIZE = 10;
std::mutex mtx;
std::condition_variable cv;

void producer(int id) {
    int product = 0;
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, []{ return buffer.size() < BUFFER_SIZE; });
        buffer.push(product++);
        std::cout << "Producer " << id << " produced " << product << "\n";
        lock.unlock();
        cv.notify_all();
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
}

void consumer(int id) {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, []{ return !buffer.empty(); });
        int product = buffer.front();
        buffer.pop();
        std::cout << "Consumer " << id << " consumed " << product << "\n";
        lock.unlock();
        cv.notify_all();
        std::this_thread::sleep_for(std::chrono::milliseconds(150));
}

int main() {
    std::thread producers[2], consumers[2];
    for (int i = 0; i < 2; ++i) {
        producers[i] = std::thread(producer, i + 1);
        consumers[i] = std::thread(consumer, i + 1);
    }
    for (int i = 0; i < 2; ++i) {
        producers[i].join();
        consumers[i].join();
    }
    return 0;
}
