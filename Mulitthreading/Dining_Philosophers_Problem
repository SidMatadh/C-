#include <iostream>
#include <thread>
#include <mutex>
#include <chrono>

#define N 5
using namespace std;

mutex mtx[N];

void dine(int id)
{
    int left = id;
    int right = (id + 1) % N;

    for (int i = 0; i < 3; i++)
    {
        std::cout << "Philosopher " << id << " is thinking\n";
        std::this_thread::sleep_for(std::chrono::milliseconds(100));

        // Lock in consistent order to avoid deadlock
        if (left < right) {
            mtx[left].lock();
            mtx[right].lock();
        } else {
            mtx[right].lock();
            mtx[left].lock();
        }

        std::cout << "Philosopher " << id << " is eating\n";
        
        // Unlock both forks
        mtx[left].unlock();
        mtx[right].unlock();
        std::this_thread::sleep_for(std::chrono::milliseconds(150));

    }

    cout << "Philosopher " << id << " done eating\n";
}

int main()
{
    thread philosopher[N];

    for (int i = 0; i < N; i++)
    {
        philosopher[i] = thread(dine, i);
    }

    for (int i = 0; i < N; i++)
    {
        philosopher[i].join();
    }

    return 0;
}
